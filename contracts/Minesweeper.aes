contract Minesweeper =

  record location = { x: int, y: int }
  type locations = list(location)

  record state = {
    treasures: locations,
    revealed: map(location, bool),
    owner: address,
    game_over: bool
    }

  entrypoint init() : state = 
    {
      treasures = [],
      revealed = {},
      owner = Call.caller,
      game_over = false
    }

  stateful entrypoint set_treasures(new_treasures: locations) =
    require(Call.caller == state.owner, "Only owner can set treasures")
    put(state{ treasures = new_treasures })

  payable stateful entrypoint reveal(loc: location, amount: int) =
    require(!state.game_over, "Game is over")
    require(Map.lookup(loc, state.revealed) == None, "Tile already revealed")
    require(amount > 0, "You must pay to play!")

    let is_treasure = is_treasure(loc)
    put(state{ revealed[loc] = is_treasure })

    if(is_treasure)
      Chain.spend(Call.caller, amount * 2)

  entrypoint get_revealed() : map(location, bool) =
    state.revealed

  entrypoint is_treasure(loc: location) : bool =
    switch(List.find((t) => t.x == loc.x && t.y == loc.y, state.treasures))
      None => false
      Some(_) => true

  stateful entrypoint reset_game() =
    require(Call.caller == state.owner, "Only owner can reset")
    put(state{
      treasures = [],
      revealed = {},
      game_over = false
    })

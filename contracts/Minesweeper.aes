contract Minesweeper =
  record loc = { x : int, y : int }
  record state = { owner : address, treasures : map(loc, bool), revealed : map(loc, bool) }

  entrypoint init() = { owner = Call.caller, treasures = {}, revealed = {} }

  stateful entrypoint set_treasures(ts : list(loc)) =
    require(Call.caller == state.owner, "ONLY_OWNER")
    put(state{ treasures = pairs_to_map(list_to_pairs(ts)), revealed = {} })

  stateful entrypoint reveal(p : loc) : bool =
    require(!Map.member(p, state.revealed), "ALREADY_REVEALED")
    let hit = Map.member(p, state.treasures)
    put(state{ revealed[p] = hit })
    hit

  entrypoint get_revealed() : map(loc, bool) = state.revealed

  stateful entrypoint reset_game() =
    require(Call.caller == state.owner, "ONLY_OWNER")
    put(state{ treasures = {}, revealed = {} })

  // ---- helpers (Sophia 4.0+ tuple types; no lambdas) ----
  function list_to_pairs(xs : list(loc)) : list((loc * bool)) =
    switch(xs)
      []       => []
      x :: xr  =>
        let pair : (loc * bool) = (x, true)                 // value uses comma; type uses *
        pair :: list_to_pairs(xr)

  function pairs_to_map(ps : list((loc * bool))) : map(loc, bool) =
    Map.from_list(ps)
